# CloudFormation Template for BoardGame Timer Infrastructure

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless BoardGame Timer - Complete Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  DomainName:
    Type: String
    Default: ''
    Description: Custom domain name (optional)

Globals:
  Function:
    Runtime: python3.9
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        TABLE_NAME: !Ref DataTable

Resources:
  # S3 Bucket for Static Website
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'boardgame-timer-${Environment}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # S3 Bucket Policy
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket}/*'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'BoardGame Timer ${Environment}'
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        
        Origins:
          # Static Website Origin
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
          
          # API Gateway Origin  
          - Id: APIOrigin
            DomainName: !Sub '${RestApi}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: !Sub '/${Environment}'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only

        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none

        CacheBehaviors:
          # API Routes
          - PathPattern: '/api/*'
            TargetOriginId: APIOrigin
            ViewerProtocolPolicy: https-only
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: true
              Headers: [Authorization, Content-Type]
            TTL:
              DefaultTTL: 0
              MaxTTL: 0
              MinTTL: 0

        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300

  # DynamoDB Table (Single Table Design)
  DataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'boardgame-timer-${Environment}'
      BillingMode: PAY_PER_REQUEST
      
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: player_name
          AttributeType: S
        - AttributeName: template_id
          AttributeType: S
        - AttributeName: ended_at
          AttributeType: S
        - AttributeName: EntityType
          AttributeType: S

      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE

      GlobalSecondaryIndexes:
        # Player History Index
        - IndexName: PlayerHistoryIndex
          KeySchema:
            - AttributeName: player_name
              KeyType: HASH
            - AttributeName: ended_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

        # Template Usage Index
        - IndexName: TemplateUsageIndex
          KeySchema:
            - AttributeName: template_id
              KeyType: HASH
            - AttributeName: ended_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

        # Date Range Index
        - IndexName: DateRangeIndex
          KeySchema:
            - AttributeName: EntityType
              KeyType: HASH
            - AttributeName: ended_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: BoardGameTimer

  # API Gateway
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'boardgame-timer-api-${Environment}'
      Description: BoardGame Timer API
      EndpointConfiguration:
        Types: [REGIONAL]

  # API Gateway Resources
  TemplatesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: templates

  GamesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: games

  GamesByPlayerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !Ref GamesResource
      PathPart: '{player_name}'

  # Lambda Functions
  TemplateFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'boardgame-timer-templates-${Environment}'
      Runtime: python3.9
      Handler: template_crud.handler
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          from datetime import datetime
          
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])
          
          def handler(event, context):
              method = event['httpMethod']
              
              if method == 'GET':
                  return get_templates()
              elif method == 'POST':
                  return create_template(json.loads(event['body']))
              
              return {
                  'statusCode': 405,
                  'body': json.dumps({'error': 'Method not allowed'})
              }
          
          def get_templates():
              response = table.query(
                  KeyConditionExpression='PK = :pk',
                  ExpressionAttributeValues={':pk': 'TEMPLATE'}
              )
              return {
                  'statusCode': 200,
                  'headers': {'Access-Control-Allow-Origin': '*'},
                  'body': json.dumps({'templates': response['Items']})
              }
          
          def create_template(data):
              template_id = str(uuid.uuid4())
              item = {
                  'PK': f'TEMPLATE#{template_id}',
                  'SK': 'METADATA',
                  'EntityType': 'TEMPLATE',
                  'template_id': template_id,
                  'name': data['name'],
                  'turn_time_seconds': data['turn_time_seconds'],
                  'round_time_seconds': data['round_time_seconds'],
                  'max_players': data['max_players'],
                  'created_at': datetime.utcnow().isoformat()
              }
              
              table.put_item(Item=item)
              
              return {
                  'statusCode': 201,
                  'headers': {'Access-Control-Allow-Origin': '*'},
                  'body': json.dumps({'template_id': template_id})
              }

      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DataTable

  GameFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'boardgame-timer-games-${Environment}'
      Runtime: python3.9
      Handler: game_history.handler
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          from datetime import datetime
          
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])
          
          def handler(event, context):
              method = event['httpMethod']
              
              if method == 'POST':
                  return save_game(json.loads(event['body']))
              elif method == 'GET':
                  player_name = event['pathParameters']['player_name']
                  return get_player_history(player_name)
              
              return {
                  'statusCode': 405,
                  'body': json.dumps({'error': 'Method not allowed'})
              }
          
          def save_game(data):
              game_id = str(uuid.uuid4())
              
              # Save game metadata
              game_item = {
                  'PK': f'GAME#{game_id}',
                  'SK': 'METADATA',
                  'EntityType': 'GAME',
                  'game_id': game_id,
                  'template_id': data.get('template_id'),
                  'mode': data['mode'],
                  'total_duration_seconds': data['duration'],
                  'player_count': len(data['players']),
                  'ended_at': datetime.utcnow().isoformat()
              }
              table.put_item(Item=game_item)
              
              # Save player data
              for player in data['players']:
                  player_item = {
                      'PK': f'GAME#{game_id}',
                      'SK': f'PLAYER#{player["name"]}',
                      'EntityType': 'GAME_PLAYER',
                      'game_id': game_id,
                      'player_name': player['name'],
                      'player_color': player['color'],
                      'total_time_seconds': player['total_time'],
                      'turns_taken': player['turns_taken'],
                      'ended_at': datetime.utcnow().isoformat()
                  }
                  table.put_item(Item=player_item)
              
              return {
                  'statusCode': 201,
                  'headers': {'Access-Control-Allow-Origin': '*'},
                  'body': json.dumps({'game_id': game_id})
              }
          
          def get_player_history(player_name):
              response = table.query(
                  IndexName='PlayerHistoryIndex',
                  KeyConditionExpression='player_name = :name',
                  ExpressionAttributeValues={':name': player_name},
                  ScanIndexForward=False,
                  Limit=20
              )
              
              return {
                  'statusCode': 200,
                  'headers': {'Access-Control-Allow-Origin': '*'},
                  'body': json.dumps({'games': response['Items']})
              }

      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DataTable

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt DataTable.Arn
                  - !Sub '${DataTable.Arn}/index/*'

  # API Gateway Methods
  TemplatesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref TemplatesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TemplateFunction.Arn}/invocations'

  TemplatesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref TemplatesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TemplateFunction.Arn}/invocations'

  GamesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref GamesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GameFunction.Arn}/invocations'

  # Lambda Permissions
  TemplatesFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TemplateFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*'

  GamesFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GameFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - TemplatesGetMethod
      - TemplatesPostMethod
      - GamesPostMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref Environment

Outputs:
  WebsiteURL:
    Description: Website URL
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  ApiEndpoint:
    Description: API Gateway endpoint
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  S3BucketName:
    Description: S3 bucket for static website
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref DataTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTable'