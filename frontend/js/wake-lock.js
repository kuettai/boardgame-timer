class WakeLockManager {
    constructor() {\n        this.wakeLock = null;\n        this.isSupported = 'wakeLock' in navigator;\n    }\n\n    async requestWakeLock() {\n        if (!this.isSupported) {\n            console.log('Wake Lock API not supported');\n            return false;\n        }\n\n        try {\n            this.wakeLock = await navigator.wakeLock.request('screen');\n            console.log('Screen wake lock activated');\n            \n            // Listen for wake lock release\n            this.wakeLock.addEventListener('release', () => {\n                console.log('Screen wake lock released');\n                this.wakeLock = null;\n            });\n            \n            return true;\n        } catch (err) {\n            console.error('Failed to activate wake lock:', err);\n            return false;\n        }\n    }\n\n    async releaseWakeLock() {\n        if (this.wakeLock) {\n            try {\n                await this.wakeLock.release();\n                this.wakeLock = null;\n                console.log('Wake lock released manually');\n            } catch (err) {\n                console.error('Failed to release wake lock:', err);\n            }\n        }\n    }\n\n    // Handle visibility change (when user switches tabs/apps)\n    handleVisibilityChange() {\n        if (document.visibilityState === 'visible' && !this.wakeLock) {\n            // Re-request wake lock when returning to app\n            this.requestWakeLock();\n        }\n    }\n\n    // Initialize wake lock management\n    init() {\n        // Handle visibility changes\n        document.addEventListener('visibilitychange', () => {\n            this.handleVisibilityChange();\n        });\n        \n        // Handle page unload\n        window.addEventListener('beforeunload', () => {\n            this.releaseWakeLock();\n        });\n    }\n\n    // Get wake lock status\n    isActive() {\n        return this.wakeLock !== null;\n    }\n}\n\n// Make WakeLockManager globally available\nwindow.WakeLockManager = new WakeLockManager();